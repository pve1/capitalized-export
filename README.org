* Capitalized Export

This library provides a readtable that lets the user export accessible
symbols by capitalizing them when loading or compiling files. Jump to
definition, describe symbol etc. will still work normally in SLIME.

So typing
#+BEGIN_SRC lisp
(defclass Person ()
  ((%name :initarg :name :accessor Name :initform nil)
   (%age :initarg :age :accessor Age :initform nil)))
#+END_SRC
will arrange for PERSON, NAME and AGE to be exported when the file
(either source or fasl) is loaded.

A fresh readtable is required for each file, so one might want to
create a suitable convenience macro for setting the current
readtable. The readtable should be set *after* the the package has
been set (e.g. with IN-PACKAGE).

* Example
#+BEGIN_SRC lisp

;;;; File "capitalized-export-test.lisp"
;;;;
;;;; Testing exporting by capitalizing symbols.

(defpackage :capitalized-export-test
  (:use :cl))

(in-package :capitalized-export-test)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (setf *readtable* (capitalized-export:make-capitalized-export-readtable)))

(defclass Person ()
  ((%name :initarg :name :accessor Name :initform nil)
   (%age :initarg :age :accessor Age :initform nil)))

;; |...| is not exported, should instead be exported the normal way.
(defun |Make-person| ()
  (make-instance 'person))

'A ; Export
'b ; Don't export

;; Error:
;; (defun cl-user::Foo () 1)

(defparameter *Circular* '#1=(1 2 3 . #1#))

;; This form will be returned by CL:READ as if it had been typed at
;; the bottom of the file:
;;
;; (EXPORT '(PERSON NAME AGE A *CIRCULAR*))

#+END_SRC
